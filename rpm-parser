#!/usr/bin/python3
# -*- coding: utf8 -*-

import argparse
import copy
import gzip
import io
import struct
import sys

from enum import Enum
DEBUG = False


def c2i(char):
    return struct.unpack('>b', char)[0]

def s2i(short):
    return struct.unpack('>h', short)[0]

def i2i(unsigned_int):
    return struct.unpack('>I', unsigned_int)[0]

def str_from_bytes(bytes, count):
    strings = bytes.split(b'\x00')

    return strings[0:count]

def log(statement):
    global DEBUG
    if not DEBUG:
        return
    
    if isinstance(statement, list):
        print (*statement)
        return

    print (statement)



class Type(Enum):
    Binary = 0
    Source = 1


class OperatingSystem(Enum):
    Linux = 1


class Arhitecture(Enum):
    i386    = 1
    Alpha   = 2
    Sparc   = 3
    MIPS    = 4
    PowerPC = 5
    m68000  = 6
    SGI     = 7

class Header(Enum):
    TAG_HEADERSIGNATURES  = 62
    TAG_HEADERIMMUTABLE   = 63
    TAG_HEADER18NTABLE    = 64
    TAG_HEADERI18NTABLE   = 100

    TAG_NAME              = 1000
    TAG_VERSION           = 1001
    TAG_RELEASE           = 1002
    TAG_SUMMARY           = 1004
    TAG_DESCRIPTION       = 1005
    TAG_BUILDTIME         = 1006
    TAG_BUILDHOST         = 1007
    TAG_SIZE              = 1009
    TAG_LICENSE           = 1014
    TAG_GROUP             = 1016
    TAG_OS                = 1021
    TAG_ARCH              = 1022
    TAG_SOURCERPM         = 1044
    TAG_FILEVERIFYFLAGS   = 1045
    TAG_ARCHIVESIZE       = 1046
    TAG_RPMVERSION        = 1064
    TAG_CHANGELOGTIME     = 1080
    TAG_CHANGELOGNAME     = 1081
    TAG_CHANGELOGTEXT     = 1082
    TAG_COOKIE            = 1094
    TAG_OPTFLAGS          = 1122
    TAG_PAYLOADFORMAT     = 1124
    TAG_PAYLOADCOMPRESSOR = 1125
    TAG_PAYLOADFLAGS      = 1126
    TAG_RHNPLATFORM       = 1131
    TAG_PLATFORM          = 1132

	TAG_OLDFILENAMES      = 1027
	TAG_FILESIZES         = 1028
	TAG_FILEMODES         = 1030
	TAG_FILERDEVS         = 1033
	TAG_FILEMTIMES        = 1034
	TAG_FILEMD5S          = 1035
	TAG_FILELINKTOS       = 1036
	TAG_FILEFLAGS         = 1037
	TAG_FILEUSERNAME      = 1039
	TAG_FILEGROUPNAME     = 1040
	TAG_FILEDEVICES       = 1095
	TAG_FILEINODES        = 1096
	TAG_FILELANGS         = 1097
	TAG_DIRINDEXES        = 1116
	TAG_BASENAMES         = 1117
	TAG_DIRNAMES          = 1118
	TAG_PROVIDENAME       = 1047
	TAG_REQUIREFLAGS      = 1048
	TAG_REQUIRENAME       = 1049
	TAG_REQUIREVERSION    = 1050
	TAG_CONFLICTFLAGS     = 1053
	TAG_CONFLICTNAME      = 1054
	TAG_CONFLICTVERSION   = 1055
	TAG_OBSOLETENAME      = 1090
	TAG_PROVIDEFLAGS      = 1112
	TAG_PROVIDEVERSION    = 1113
	TAG_OBSOLETEFLAGS     = 1114
	TAG_OBSOLETEVERSION   = 1115

class Signature(Enum):
    SIGTAG_DSA = 267
    SIGTAG_RSA = 268
    SIGTAG_SHA1 = 269
    SIGTAG_SIZE = 1000
    SIGTAG_PGP = 1002
    SIGTAG_MD5 = 1004
    SIGTAG_GPG = 1005
    SIGTAG_PAYLOADSIZE = 1007
    SIGTAG_SHA1HEADER =1010
    SIGTAG_DSAHEADER = 1011
    SIGTAG_RSAHEADER = 1012


class Index(Enum):
    NULL         = 0
    CHAR         = 1  
    INT8         = 2 
    INT16        = 3 
    INT32        = 4 
    INT64        = 5 
    STRING       = 6 
    BIN          = 7 
    STRING_ARRAY = 8 
    I18STRING    = 9 

class IndexSettings(Enum):
    NULL         = (0, ())
    CHAR         = (1, lambda d: c2i(d[0:1]))
    INT8         = (2, lambda d: c2i(d[0:1]))
    INT16        = (2, lambda d: s2i(d[0:2]))
    INT32        = (4, lambda d: i2i(d[0:4]))
    INT64        = (0, ())
    STRING       = (0, lambda d: d.hex())
    BIN          = (1, lambda d: d.hex())
    STRING_ARRAY = (0, ())
    I18SRING     = (0, ())


class RPM(object):
    MAGIC = b'\xed\xab\xee\xdb'
    HEADER = b'\x8e\xad\xe8'
    LEAD_SIZE = 96

    def __init__(self, archive):
        self.archive = archive
        self.__version = None                       # 4
        self.__type = None                          # 2
        self.__arhitecture = None                   # 2
        self.__package_name = None                  # 66
        self.__operating_system = None              # 2
        self.__signature = None                     # 2
        self.__header_version = None                # 1
        self.__reserved = None                      # 4
        self.__index_entries_count = None           # 4
        self.__signature_size = None                # 4
        self.__index = {
                'tag': None,                        # 4
                'type': None,                       # 4
                'offset': None,                     # 4
                'count': None                       # 4
        }
        self.__index_type = None
        self.__signature_type = None                
        self.__store = None                         # Unlimited


    def parse(self):
        self.archive.seek(0)
        self.parse_lead()

        self.archive.seek(RPM.LEAD_SIZE)
        self.parse_signature()

        self.archive.seek(self.signature_size())
        self.parse_header()


    def parse_lead(self):
        magic = self.archive.read(4)

        assert magic == RPM.MAGIC, 'File {f} is not a RPM self.archive'.format(f=self.__archive)

        rpm_version = self.archive.read(2)
        self.__version = '{major}.{minor}'.format(major=c2i(rpm_version[0:1]), minor=c2i(rpm_version[1:2]))
        log (self.__version)

        self.__type = Type(s2i(self.archive.read(2)))
        log (self.__type)

        self.__arhitecture = Arhitecture(s2i(self.archive.read(2)))
        log (self.__arhitecture)

        self.__package_name = self.archive.read(66).decode('utf-8').strip('\0')
        log (self.__package_name)
         
        self.__operating_system = OperatingSystem(s2i(self.archive.read(2)))
        log (self.__operating_system)

        self.__signature = str(s2i(self.archive.read(2)))
        log (self.__signature)

        reserved = self.archive.read(16)

    def parse_header(self):
        header = self.archive.read(3)

        assert header == RPM.HEADER, 'Wrong header in RPM self.archive'

        self.__header_version = c2i(self.archive.read(1))
        log (self.__header_version)

        reserved = self.archive.read(4)

        self.__index_entries_count = i2i(self.archive.read(4))
        log (self.__index_entries_count)

        self.__header_size = i2i(self.archive.read(4))
        log (self.__header_size)

        self.__index_entries = []
        for _ in range(0, self.__index_entries_count):
            index = dict()
            index['tag'] = Signature(i2i(self.archive.read(4)))
            index['type'] = i2i(self.archive.read(4))
            index['offset'] = i2i(self.archive.read(4))
            index['count'] = i2i(self.archive.read(4))
            
            self.__index_entries.append(index)

        size = sum(index['count'] for index in self.__index_entries)
        self.__store_position = RPM.LEAD_SIZE + size 

        self.__index_entries.sort(key=lambda index: index['offset'])

        self.__store = {}
        for index in self.__index_entries:
            index_name = Index(index['type']).name
            _, callback = IndexSettings[index_name].value

            self.archive.seek(self.__store_position + index['offset'])

            #log (self.__index_type[index['type']], index['count'], index['tag'])

            if index['type'] <= 5 or index['type'] == 7:
                data = self.archive.read(size * index['count'])

                self.__store[index['tag']] = callback(data)

                # log (index['tag'], self.__store[index['tag']])

                continue

            elif index['type'] == 6 or index['type'] == 9:
                data = self.archive.read()
                strings = str_from_bytes(data, index['count'])

                converted = list(map(callback, strings))

                if index['count'] == 1:
                    converted = converted[0]

                self.__store[index['tag']] = converted

                # log (index['tag'], self.__store[index['tag']])

                continue

    def parse_signature(self):
        signature = self.parse_header()

    def signature_size(self):
        start = self.__store_position + self.__header_size
        self.archive.seek(start)
        data = self.archive.read()

        return data.index(RPM.HEADER) + start


def main():
    global DEBUG

    settings = parse_arguments()
    DEBUG = settings.verbose

    with open(settings.rpm, 'rb') as archive:
        rpm = RPM(archive)
        rpm.parse()


def die(message):
    print (message, file=sys.stderr)
    exit(-1)


def parse_arguments():
    parser = argparse.ArgumentParser(description='Extract files from RPM package')
    parser.add_argument(
        'rpm',
        metavar='RPM',
        help='RPM file'
    )

    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        default=False,
        help='log metadata as it\'s being parsed'
    )

    return parser.parse_args()


if __name__ == '__main__':
    try:
        main()
    except Exception as error:
        import traceback
        traceback.print_exc()
        die(str(error))

    exit(0)
