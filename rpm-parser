#!/usr/bin/python3
# -*- coding: utf8 -*-

import argparse

from constants import *
from utility import *


class RPM(object):
    MAGIC = b'\xed\xab\xee\xdb'
    HEADER = b'\x8e\xad\xe8'
    LEAD_SIZE = 96

    def __init__(self, archive):
        self.archive = archive
        self.__version = None                       # 4
        self.__type = None                          # 2
        self.__arhitecture = None                   # 2
        self.__package_name = None                  # 66
        self.__operating_system = None              # 2
        self.__signature = None                     # 2
        self.__header_version = None                # 1
        self.__reserved = None                      # 4
        self.__index_entries_count = None           # 4
        self.__signature_size = None                # 4
        self.__index = {
                'tag': None,                        # 4
                'type': None,                       # 4
                'offset': None,                     # 4
                'count': None                       # 4
        }
        self.__index_type = None
        self.__signature_type = None                
        self.__store = None                         # Unlimited


    def parse(self):
        self.archive.seek(0)
        self.parse_lead()

        self.archive.seek(RPM.LEAD_SIZE)
        self.parse_signature(Signature)

        self.archive.seek(self.signature_size())
        self.parse_header(Header)


    def parse_lead(self):
        magic = self.archive.read(4)

        assert magic == RPM.MAGIC, 'File {f} is not a RPM self.archive'.format(f=self.__archive)

        rpm_version = self.archive.read(2)
        self.__version = '{major}.{minor}'.format(major=c2i(rpm_version[0:1]), minor=c2i(rpm_version[1:2]))
        log ('Version ' + self.__version)

        self.__type = PackageType(s2i(self.archive.read(2)))
        log (self.__type)

        self.__arhitecture = Arhitecture(s2i(self.archive.read(2)))
        log (self.__arhitecture)

        self.__package_name = self.archive.read(66).decode('utf-8').strip('\0')
        log ('PackageName '+ self.__package_name)
         
        self.__operating_system = OperatingSystem(s2i(self.archive.read(2)))
        log (self.__operating_system)

        self.__signature = SignatureType(s2i(self.archive.read(2)))
        log (self.__signature)

        reserved = self.archive.read(16)

    def parse_header(self, tags):
        header = self.archive.read(3)

        assert header == RPM.HEADER, 'Wrong header in RPM self.archive'

        self.__header_version = c2i(self.archive.read(1))
        log ('HeaderVersion ' + str(self.__header_version))

        reserved = self.archive.read(4)

        self.__index_entries_count = i2i(self.archive.read(4))
        log ('IndexEntriesCount ' + str(self.__index_entries_count))

        self.__header_size = i2i(self.archive.read(4))
        log ('HeaderSize ' + str(self.__header_size))

        self.__index_entries = []
        for _ in range(0, self.__index_entries_count):
            index = dict()
            index['tag'] = tags(i2i(self.archive.read(4)))
            index['type'] = i2i(self.archive.read(4))
            index['offset'] = i2i(self.archive.read(4))
            index['count'] = i2i(self.archive.read(4))
            
            self.__index_entries.append(index)

        size = sum(index['count'] for index in self.__index_entries)
        self.__store_position = RPM.LEAD_SIZE + size 

        self.__index_entries.sort(key=lambda index: index['offset'])

        self.__store = {}
        for index in self.__index_entries:
            index_name = Index(index['type']).name
            _, callback = IndexSettings[index_name].value

            self.archive.seek(self.__store_position + index['offset'])

            #log (self.__index_type[index['type']], index['count'], index['tag'])

            if index['type'] <= 5 or index['type'] == 7:
                data = self.archive.read(size * index['count'])

                self.__store[index['tag']] = callback(data)

                log (index['tag'])

                continue

            elif index['type'] == 6 or index['type'] == 9:
                data = self.archive.read()
                strings = str_from_bytes(data, index['count'])

                converted = list(map(callback, strings))

                if index['count'] == 1:
                    converted = converted[0]

                self.__store[index['tag']] = converted

                # log (index['tag'], self.__store[index['tag']])

                continue

    def parse_signature(self, signatures):
        signature = self.parse_header(signatures)

    def signature_size(self):
        start = self.__store_position + self.__header_size
        self.archive.seek(start)
        data = self.archive.read()

        return data.index(RPM.HEADER) + start


def main():
    global DEBUG

    settings = parse_arguments()
    set_debug(settings.verbose)

    with open(settings.rpm, 'rb') as archive:
        rpm = RPM(archive)
        rpm.parse()


def parse_arguments():
    parser = argparse.ArgumentParser(description='Extract files from RPM package')
    parser.add_argument(
        'rpm',
        metavar='RPM',
        help='RPM file'
    )

    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        default=False,
        help='log metadata as it\'s being parsed'
    )

    return parser.parse_args()


if __name__ == '__main__':
    try:
        main()
    except Exception as error:
        import traceback
        traceback.print_exc()
        die(str(error))

